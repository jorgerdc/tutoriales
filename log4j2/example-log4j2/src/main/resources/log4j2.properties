#####		Configuration file

#Nivel de eventos Log4j internos que deben registrarse en la consola.
#Se recomienda poner debug para mostrar el comportamiento de un aplicativo ya que manda a consola registro de lo que sucede incluso antes de encontrar el archivo "properties", util para encontrar errores de inicializaci√≥n.
#Posibles valores: "trace", "debug", "info", "warn", "error" and "fatal"
status=debug

#File name. "Optional"
name = PropertiesConfig

 #Path log file
 property.filename = logs/logExample

 #Type appender, this can be console, file, rolling, etc.
appenders = console, file

 ##		File configuration section
 #FileAppender to initialize configuration
appender.file.type = File
appender.file.name = LOGFILE
appender.file.fileName=${filename}/log4j2
appender.file.layout.type=PatternLayout

# Specify the pattern of the logs
appender.file.layout.pattern=[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n

#Configuration to writte in file
loggers=file
logger.file.name=log4j2.HelloWorldLog4j2
logger.file.level = info
logger.file.appenderRefs = file
logger.file.appenderRef.file.ref = LOGFILE


##		Console configuration section
# ConsoleAppender to initialize configurations
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout

# Specify the pattern of the logs
appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

 #Configuration appender type, in this case show logs in console
rootLogger.appenderRefs = stdout
rootLogger.appenderRef.stdout.ref = STDOUT

 #Level of events that belong to a class
rootLogger.level = info
#In addition it can configure in code, the equivalent values of level are:
#		OFF  		   0
#		FATAL 	 100
#		ERROR  200
#		WARN   300
#		INFO     400
#		DEBUG  500
#		TRACE   600
#		ALL  Integer.MAX_VALUE
